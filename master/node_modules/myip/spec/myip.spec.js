/*global describe, beforeEach, it*/
'use strict';

var mocha = require('mocha'),
  assert = require('chai').assert,
  nock = require('nock'),
  myip = require('../src/myip'),
  httpConfig = require('../src/http-config');

var MOCK_IP = '111.222.333.444';

describe('myip', function () {

  it('should return the mock IP', function (done) {
    var scope = nock('http://' + httpConfig.hostname)
      .matchHeader('User-Agent', httpConfig.headers['User-Agent'])
      .intercept(httpConfig.path, httpConfig.method)
      .reply(200, MOCK_IP);

    myip(true, function (err, ip) {
      assert.isNull(err);
      assert.equal(MOCK_IP, ip);
      // assert the HTTP request was actually made
      scope.done();
      done();
    });
  });

  it('should cache the mock IP', function (done) {
    var scope = nock('http://' + httpConfig.hostname)
      .matchHeader('User-Agent', httpConfig.headers['User-Agent'])
      .intercept(httpConfig.path, httpConfig.method)
      .reply(200, MOCK_IP);

    myip(true, function (err, ip) {
      assert.isNull(err);
      assert.equal(MOCK_IP, ip);
      // assert the HTTP request was actually made
      scope.done();
      myip(function (err, ip) {
        assert.isNull(err);
        assert.equal(MOCK_IP, ip);
        // this will throw if a second request is made
        scope.done(); 
        done();
      });
    });
  });

  it('should reset the cache', function (done) {
    var mockIP = MOCK_IP;

    var scope = nock('http://' + httpConfig.hostname)
      .matchHeader('User-Agent', httpConfig.headers['User-Agent'])
      .intercept(httpConfig.path, httpConfig.method)
      .reply(200, mockIP);

    myip(true, function (err, ip) {
      assert.isNull(err);
      assert.equal(mockIP, ip);
      // assert the HTTP request was actually made
      scope.done();

      mockIP = '999.888.777.666';

      // reset the http mock
      scope = nock('http://' + httpConfig.hostname)
        .matchHeader('User-Agent', httpConfig.headers['User-Agent'])
        .intercept(httpConfig.path, httpConfig.method)
        .reply(200, mockIP);

      myip(true, function (err, ip) {
        assert.isNull(err);
        assert.equal(mockIP, ip);
        // this will throw if a second request was NOT made
        scope.done(); 
        done();
      });
    });
  });

});

